// Generated by CoffeeScript 1.9.1
(function() {
  window.Instance = (function() {
    var Constants;

    Constants = window.Constants;

    function Instance(instance) {
      this.instance = instance;
    }

    Instance.prototype.getKeys = function() {
      return Object.keys(this.instance);
    };

    Instance.prototype.get = function(key) {
      if (this.has(key)) {
        return this.instance[key];
      } else {
        return null;
      }
    };

    Instance.prototype.has = function(key) {
      return this.instance[key] != null;
    };

    Instance.prototype.isClass = function(key) {
      return this.has(key) && (this.get(key)[Constants.M_CLASS] != null);
    };

    Instance.prototype.isReference = function(key) {
      return this.has(key) && (this.get(key)[Constants.M_REFERENCE] != null);
    };

    Instance.prototype.getClassName = function(key) {
      if (this.isClass(key)) {
        return this.get(key)[Constants.M_CLASS];
      } else {
        return null;
      }
    };

    Instance.prototype.getReferenceName = function(key) {
      if (this.isReference(key)) {
        return this.get(key)[Constants.M_REFERENCE];
      } else {
        return null;
      }
    };

    Instance.prototype.getInputs = function(key) {
      if (this.has(key) && (this.get(key)[Constants.INPUTS] != null)) {
        return this.get(key)[Constants.INPUTS];
      } else {
        return null;
      }
    };

    Instance.prototype.getOutputs = function(key) {
      if (this.has(key) && (this.get(key)[Constants.OUTPUTS] != null)) {
        return this.get(key)[Constants.OUTPUTS];
      } else {
        return null;
      }
    };

    Instance.prototype.getSources = function(key) {
      if (this.has(key) && (this.get(key)[Constants.SOURCES] != null)) {
        return this.get(key)[Constants.SOURCES];
      } else {
        return null;
      }
    };

    Instance.prototype.getTargets = function(key) {
      if (this.has(key) && (this.get(key)[Constants.TARGETS] != null)) {
        return this.get(key)[Constants.TARGETS];
      } else {
        return null;
      }
    };

    Instance.prototype.hasAttributes = function(key) {
      return this.has(key) && (this.get(key)[Constants.ATTRIBUTES] != null);
    };

    Instance.prototype.getAttributeKeys = function(key) {
      if (this.hasAttributes(key)) {
        return Object.keys(this.get(key)[Constants.ATTRIBUTES]);
      } else {
        return null;
      }
    };

    Instance.prototype.getAttribute = function(key, attributeKey) {
      if (this.hasAttributes(key) && (this.get(key)[Constants.ATTRIBUTES][attributeKey] != null)) {
        return this.get(key)[Constants.ATTRIBUTES][attributeKey];
      } else {
        return null;
      }
    };

    return Instance;

  })();

}).call(this);

//# sourceMappingURL=Instance.js.map
