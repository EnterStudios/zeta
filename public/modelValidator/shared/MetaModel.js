// Generated by CoffeeScript 1.9.1
(function() {
  window.MetaModel = (function() {
    var Attribute, Bounds, Constants;

    Bounds = window.Bounds;

    Attribute = window.Attribute;

    Constants = window.Constants;

    function MetaModel(metaModel) {
      this.metaModel = metaModel;
    }

    MetaModel.prototype.get = function(key) {
      if (this.has(key)) {
        return this.metaModel[key];
      } else {
        return null;
      }
    };

    MetaModel.prototype.has = function(key) {
      return this.metaModel[key] != null;
    };

    MetaModel.prototype.hasClass = function(key) {
      return this.has(key) && this.get(key)[Constants.M_TYPE] === Constants.M_CLASS;
    };

    MetaModel.prototype.hasReference = function(key) {
      return this.has(key) && this.get(key)[Constants.M_TYPE] === Constants.M_REFERENCE;
    };

    MetaModel.prototype.getInputBounds = function(classKey, referenceKey) {
      return this.getBounds(classKey, referenceKey, Constants.INPUTS);
    };

    MetaModel.prototype.getOutputBounds = function(classKey, referenceKey) {
      return this.getBounds(classKey, referenceKey, Constants.OUTPUTS);
    };

    MetaModel.prototype.getSourceBounds = function(referenceKey, classKey) {
      return this.getBounds(referenceKey, classKey, Constants.SOURCES);
    };

    MetaModel.prototype.getTargetBounds = function(referenceKey, classKey) {
      return this.getBounds(referenceKey, classKey, Constants.TARGETS);
    };

    MetaModel.prototype.getBounds = function(key, type, field) {
      var bounds, boundsObjects, fieldArray, i, inheritedBounds, j, len, len1, ref, ref1, superType;
      if (!(this.has(key) && this.has(type))) {
        return null;
      }
      fieldArray = this.get(key)[field];
      boundsObjects = fieldArray.filter(function(field) {
        return field[Constants.TYPE] === type;
      });
      if (boundsObjects.length > 0) {
        return new Bounds(boundsObjects[0][Constants.attr.LOWER_BOUND], boundsObjects[0][Constants.attr.UPPER_BOUND]);
      }
      inheritedBounds = [];
      if (this.hasSuperTypes(key)) {
        ref = this.getSuperTypes(key);
        for (i = 0, len = ref.length; i < len; i++) {
          superType = ref[i];
          bounds = this.getBounds(superType, type, field);
          if (bounds != null) {
            inheritedBounds.push(bounds);
          }
        }
      }
      if (this.hasSuperTypes(type)) {
        ref1 = this.getSuperTypes(type);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          superType = ref1[j];
          bounds = this.getBounds(key, superType, field);
          if (bounds != null) {
            inheritedBounds.push(bounds);
          }
        }
      }
      if (inheritedBounds.length === 1) {
        return inheritedBounds[0];
      }
      return null;
    };

    MetaModel.prototype.hasAttributes = function(key) {
      return this.has(key) && (this.get(key)[Constants.ATTRIBUTES] != null);
    };

    MetaModel.prototype.hasSuperTypes = function(key) {
      return this.has(key) && (this.get(key)[Constants.SUPER_TYPES] != null);
    };

    MetaModel.prototype.getSuperTypes = function(key) {
      if (this.hasSuperTypes(key)) {
        return this.get(key)[Constants.SUPER_TYPES];
      } else {
        return null;
      }
    };

    MetaModel.prototype.getDirectAttributes = function(key) {
      if (this.has(key) && this.hasAttributes(key)) {
        return this.get(key)[Constants.ATTRIBUTES];
      } else {
        return null;
      }
    };

    MetaModel.prototype.getAttribute = function(objectKey, attributeKey) {
      var attribute, i, inheritedAttributes, len, ref, superType;
      if (this.hasAttributes(objectKey) && (this.getDirectAttributes(objectKey)[attributeKey] != null)) {
        return new Attribute(this.getDirectAttributes(objectKey)[attributeKey]);
      }
      inheritedAttributes = [];
      if (this.hasSuperTypes(objectKey)) {
        ref = this.getSuperTypes(objectKey);
        for (i = 0, len = ref.length; i < len; i++) {
          superType = ref[i];
          attribute = this.getAttribute(superType, attributeKey);
          if (attribute != null) {
            inheritedAttributes.push(attribute);
          }
        }
      }
      if (inheritedAttributes.length === 1) {
        return inheritedAttributes[0];
      }
      return null;
    };

    return MetaModel;

  })();

}).call(this);

//# sourceMappingURL=MetaModel.js.map
