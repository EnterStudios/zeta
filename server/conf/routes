### Webpage
GET         /                                                   @controllers.webpage.Webpage.index
GET         /diagramsOverview                                   @controllers.webpage.Webpage.diagramsOverview(uuid: String = null)
GET         /diagramsOverview/:uuid                             @controllers.webpage.Webpage.diagramsOverview(uuid: String)


### Metamodel
GET         /newMetaModel                                       @controllers.MetaModelController.newMetaModel
GET         /metaModelEditor/:metaModelUuid                     @controllers.MetaModelController.metaModelEditor(metaModelUuid: String)
POST        /saveMetaModel                                      @controllers.MetaModelController.saveMetaModel
GET         /metaModelCodeEditor/:metaModelUuid/:dslType        @controllers.MetaModelController.codeEditor(metaModelUuid: String, dslType: String)
GET         /deleteMetaModel/:metaModelUuid                     @controllers.MetaModelController.deleteMetaModel(metaModelUuid: String)
GET         /metaModelSocket/:metaModelUuid                     @controllers.MetaModelController.metaModelSocket(metaModelUuid: String)


### MetaModel REST API
GET         /metamodels/:metamodelId                            @controllers.restApi.MetaModelRestApi.getMetaModel(metamodelId: String)
GET         /metamodels/:metamodelId/mclasses                   @controllers.restApi.MetaModelRestApi.getmClasses(metamodelId: String)
GET         /metamodels/mclasses/:mclassId                      @controllers.restApi.MetaModelRestApi.getmClass(mclassId: String)
GET         /metamodels/:metamodelId/mrefs                      @controllers.restApi.MetaModelRestApi.getmRefs(metamodelId: String)
GET         /metamodels/mrefs/:mrefId                           @controllers.restApi.MetaModelRestApi.getmRef(mrefId: String)


### Model
GET         /newModel/:metaModelUuid                            @controllers.ModelController.newModel(metaModelUuid: String)
GET         /modelEditor/:metaModelUuid/:modelUuid              @controllers.ModelController.modelEditor(metaModelUuid: String, modelUuid: String)
GET         /modelSocket/:graphType/:instanceId                 @controllers.ModelController.modelSocket(instanceId:String, graphType:String)
GET         /modelValidator                                     @controllers.ModelController.modelValidator


### Model REST API
GET         /models/:modelId                                    @controllers.restApi.ModelRestApi.getModel(modelId: String)
GET         /models/:modelId/nodes                              @controllers.restApi.ModelRestApi.getNodes(modelId: String)
GET         /models/:modelId/nodes/:nodeId                      @controllers.restApi.ModelRestApi.getNode(modelId: String, nodeId: String)
GET         /models/:modelId/edges                              @controllers.restApi.ModelRestApi.getEdges(modelId: String)
GET         /models/:modelId/edges/:edgeId                      @controllers.restApi.ModelRestApi.getEdge(modelId: String, edgeId: String)


## Code Editor
GET         /codeEditorSocket/:metaModelUuid/:dslType           @controllers.CodeEditorController.codeSocket(metaModelUuid: String, dslType: String)


### oAuth 2
POST        /oauth/accessToken                                  @controllers.oAuth.OAuthController.accessToken
POST        /oauth/accessTokenLocal                             @controllers.oAuth.OAuthLocalController.accessToken
# temp. route for testing purposes
GET         /oauth/info                                         @controllers.oAuth.OAuthController.info
GET         /oauth/setup                                        @controllers.oAuth.OAuthController.setup


### Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                       controllers.Assets.at(path="/public", file)


### include securesocial routes
->          /auth                                               securesocial.Routes

